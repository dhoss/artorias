/**
 * This class is generated by jOOQ
 */
package com.artorias.database.jooq.tables.records;


import com.artorias.database.jooq.tables.Author;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record8<Integer, String, String, String, Timestamp, Timestamp, Boolean, Boolean> {

    private static final long serialVersionUID = -1575368706;

    /**
     * Setter for <code>blog.author.author_id</code>.
     */
    public AuthorRecord setAuthorId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.author_id</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>blog.author.name</code>.
     */
    public AuthorRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>blog.author.email</code>.
     */
    public AuthorRecord setEmail(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.email</code>.
     */
    public String getEmail() {
        return (String) get(2);
    }

    /**
     * Setter for <code>blog.author.password</code>.
     */
    public AuthorRecord setPassword(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.password</code>.
     */
    public String getPassword() {
        return (String) get(3);
    }

    /**
     * Setter for <code>blog.author.created_on</code>.
     */
    public AuthorRecord setCreatedOn(Timestamp value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.created_on</code>.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>blog.author.updated_on</code>.
     */
    public AuthorRecord setUpdatedOn(Timestamp value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.updated_on</code>.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>blog.author.is_active</code>.
     */
    public AuthorRecord setIsActive(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>blog.author.is_banned</code>.
     */
    public AuthorRecord setIsBanned(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>blog.author.is_banned</code>.
     */
    public Boolean getIsBanned() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, String, String, String, Timestamp, Timestamp, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, String, String, String, Timestamp, Timestamp, Boolean, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Author.AUTHOR.AUTHOR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Author.AUTHOR.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Author.AUTHOR.EMAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Author.AUTHOR.PASSWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field5() {
        return Author.AUTHOR.CREATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field6() {
        return Author.AUTHOR.UPDATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field7() {
        return Author.AUTHOR.IS_ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field8() {
        return Author.AUTHOR.IS_BANNED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getAuthorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value5() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value6() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value7() {
        return getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value8() {
        return getIsBanned();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value1(Integer value) {
        setAuthorId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value3(String value) {
        setEmail(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value4(String value) {
        setPassword(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value5(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value6(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value7(Boolean value) {
        setIsActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord value8(Boolean value) {
        setIsBanned(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorRecord values(Integer value1, String value2, String value3, String value4, Timestamp value5, Timestamp value6, Boolean value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Integer authorId, String name, String email, String password, Timestamp createdOn, Timestamp updatedOn, Boolean isActive, Boolean isBanned) {
        super(Author.AUTHOR);

        set(0, authorId);
        set(1, name);
        set(2, email);
        set(3, password);
        set(4, createdOn);
        set(5, updatedOn);
        set(6, isActive);
        set(7, isBanned);
    }
}
