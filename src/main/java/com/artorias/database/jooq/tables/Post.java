/**
 * This class is generated by jOOQ
 */
package com.artorias.database.jooq.tables;


import com.artorias.database.jooq.Blog;
import com.artorias.database.jooq.Keys;
import com.artorias.database.jooq.tables.records.PostRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = -314064689;

    /**
     * The reference instance of <code>blog.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>blog.post.post_id</code>.
     */
    public final TableField<PostRecord, Integer> POST_ID = createField("post_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('post_post_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blog.post.title</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>blog.post.body</code>.
     */
    public final TableField<PostRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>blog.post.author_id</code>.
     */
    public final TableField<PostRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.post.created_on</code>.
     */
    public final TableField<PostRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>blog.post.updated_on</code>.
     */
    public final TableField<PostRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>blog.post.published_on</code>.
     */
    public final TableField<PostRecord, Timestamp> PUBLISHED_ON = createField("published_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>blog.post</code> table reference
     */
    public Post() {
        this("post", null);
    }

    /**
     * Create an aliased <code>blog.post</code> table reference
     */
    public Post(String alias) {
        this(alias, POST);
    }

    private Post(String alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(String alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blog.BLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PostRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.POST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostRecord>> getKeys() {
        return Arrays.<UniqueKey<PostRecord>>asList(Keys.POST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PostRecord, ?>>asList(Keys.POST__POST_AUTHOR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Post as(String alias) {
        return new Post(alias, this);
    }

    /**
     * Rename this table
     */
    public Post rename(String name) {
        return new Post(name, null);
    }
}
